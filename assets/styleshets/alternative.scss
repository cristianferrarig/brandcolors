
@function brandcolor($name,$number:1) {
  $string-name:       to-string($name);
  $remove-spaces:     str-replace($string-name," ","-");
  $remove-underscore: str-replace($remove-spaces,"_","-");

  $brand-key:    $remove-underscore;
  $brand-name:   str-replace($brand-key,"-"," ");
  $brand-colors: ();
  $brand-color:  "";

  @if map-has-key($brandcolors, $brand-key) {
    $brand-colors:     map-get($brandcolors, $brand-key);
    $brand-color-type: type-of($brand-colors);

    @if $brand-color-type == list {
      $brand-colors-count: length($brand-colors);

      @if $brand-colors-count >= $number {
        $brand-color-code: nth($brand-colors, $number);
        $brand-color-type: type-of($brand-color-code);

        @if $brand-color-type == color {
          $brand-color: $brand-color-code;
        }
        @else {
          @error "The color number `#{$number}` de `#{$brand-name}` is not a valid color: `#{$brand-color-code}`";
        }
      }

      @else {
        @error "`#{$brand-name}` has only #{$brand-colors-count} colors and you're asking for number `#{$number}`";
      }
    }

    @else if $brand-color-type == color {
      $brand-color: $brand-colors;
      @if $number != 1 {
        @error "`#{$brand-name}` has only one color and you're asking for number `#{$number}`";
      }
    }

    @else {
      @error "The color assigned to the `#{$brand-name}` brand is not a valid color: #{$brand-colors}";
    }

  }
  @else {
    @error "The brand you are looking for does not exist or is misspelled: '#{$string-name}'";
  }

  @return $brand-color;
}